
apiVersion: argoproj.io/v1alpha1
kind: CronWorkflow
metadata:
  name: demo-drift-check
  namespace: mlops-dev
spec:
  schedule: "0 * * * *"   # cada hora
  concurrencyPolicy: "Forbid"
  startingDeadlineSeconds: 0
  workflowSpec:
    entrypoint: drift
    serviceAccountName: argo-workflow
    templates:
      - name: drift
        container:
          image: python:3.10-slim
          command: [bash, -lc]
          args:
            - |
              pip install --no-cache-dir pandas numpy evidently==0.4.36 mlflow==2.15.1 boto3==1.34.162 &&               python - <<'PY'
              import os, random, time
              import numpy as np, pandas as pd
              from evidently.report import Report
              from evidently.metrics import ColumnDriftMetric
              # Genera dataset de referencia y actual "sintético"
              rng = np.random.default_rng(42)
              ref = pd.DataFrame({"x": rng.normal(0,1,1000)})
              cur = pd.DataFrame({"x": rng.normal(0.05,1.1,1000)})
              r = Report(metrics=[ColumnDriftMetric(column_name="x")])
              r.run(reference_data=ref, current_data=cur)
              # imprime JSON con resultado (Fleet/Rancher mostrará logs)
              print(r.as_dict())
              PY
